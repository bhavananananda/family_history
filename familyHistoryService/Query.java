//package net.sf.saxon;
// modified from Michael Kay's code
//
// D A Duce
// Oxford Brookes University
// March 2008
//
package familyHistoryService;


import java.io.StringWriter;
import net.sf.saxon.s9api.Processor;
import net.sf.saxon.s9api.Serializer;
import net.sf.saxon.s9api.XQueryCompiler;
import net.sf.saxon.s9api.XQueryEvaluator;
import net.sf.saxon.s9api.XQueryExecutable;

/**
 * This <B>Query</B> class provides an interface to XQuery It is based on the
 * Query class providing a command-line interface to the Saxon XQuery processor
 * in Michael Kay's Saxon distribution.
 * 
 * The XQuery syntax supported conforms to the W3C XQuery 1.0 drafts.
 * 
 * @author M.H.Kay (michael.h.kay@ntlworld.com); modified by D.A. Duce Oxford
 *         Brookes University, January 2006 to work with Saxon 8.6.1 and March
 *         2008 to work with Saxon 9 API (s9api)
 */


public class Query {
	

	/**
	 * Applies the specified query and returns serialized result
	 * 
	 * @param queryString
	 *            Query to apply; assume this contains the doc to query
	 * @param filename
	 *            Name of file to apply query to - NOTE not used in this code
	 * @return string representing result of query
	 */

	protected String doQuery(String queryString, String filename)
			throws Exception {
		// Note that the parameter "filename" is not uesd; assumes filename is
		// in the
		// XQuery expression to be evaluated (e.g. ... in doc(cds.xml)//cd ...
		// Code uses the Saxon 9 API
		// See Saxon API doc for details
		// http://www.saxonica.com/documentation/changes/intro/s9api90.html
		Processor proc = new Processor(false);
		XQueryCompiler comp = proc.newXQueryCompiler();
		// create a new XQueryExecutable object to evaluate the given query
		XQueryExecutable exp = comp.compile(queryString);
		// load compiled query into XQueryEvaluator
		XQueryEvaluator qe = exp.load();
		// now code to define where the output is to go; in this case to a
		// StringWriter
		StringWriter outputBuffer = new StringWriter();
		// now specify a Serializer object - XML generated by XQuery will be
		// serialised (converted to familiar xml markup text
		Serializer s = new Serializer();
		// next line causes XML declaration "<?xml version=..." to be omitted,
		// so xml can be returned directly in body of SOAP message
		s.setOutputProperty(Serializer.Property.OMIT_XML_DECLARATION, "yes");
		s.setOutputWriter(outputBuffer);
		// now run the query
		qe.run(s);
		// send to server console window for debugging
		System.out.println("Result of doQuery" + outputBuffer.toString());
		// return result as a String
		return outputBuffer.toString();
	}

}

//
//The contents of this file are subject to the Mozilla Public License Version
//1.0 (the "License");
//you may not use this file except in compliance with the License. You may
//obtain a copy of the
//License at http://www.mozilla.org/MPL/
//
//Software distributed under the License is distributed on an "AS IS" basis,
//WITHOUT WARRANTY OF ANY KIND, either express or implied.
//See the License for the specific language governing rights and limitations
//under the License.
//
//The Original Code is: all this file.
//
//The Initial Developer of the Original Code is
//Michael Kay of International Computers Limited (michael.h.kay@ntlworld.com).
//
//Portions created by (your name) are Copyright (C) (your legal entity). All
//Rights Reserved.
//
//Contributor(s): changes to allow source and/or stylesheet from stdin
//contributed by
//Gunther Schadow [gunther@aurora.regenstrief.org]
//
